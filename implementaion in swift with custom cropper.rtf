{\rtf1\ansi\ansicpg1252\cocoartf2511
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red211\green24\blue149;\red0\green0\blue0;\red255\green255\blue255;
\red65\green161\blue192;\red0\green160\blue255;\red35\green255\blue131;\red120\green109\blue255;}
{\*\expandedcolortbl;;\csgenericrgb\c82800\c9500\c58300;\csgenericrgb\c0\c0\c0;\csgenericrgb\c100000\c100000\c100000;
\csgenericrgb\c25490\c63137\c75294;\csgenericrgb\c0\c62600\c100000;\csgenericrgb\c13700\c100000\c51200;\csgenericrgb\c46900\c42600\c100000;}
\paperw11900\paperh16840\margl1440\margr1440\vieww25400\viewh13540\viewkind0
\deftab494
\pard\tx494\pardeftab494\pardirnatural\partightenfactor0

\f0\fs22 \cf2 \cb3 //First step \
\
//import
\fs20 \cf4  RSKImageCropper\
\
//And variable in your controller \

\fs22 \cf2 \
//let
\fs20 \cf4  
\fs22 \cf5 imagePickerController
\fs20 \cf4  = 
\fs22 \cf6 UIImagePickerController
\fs20 \cf4 ()\
\
//Then add extension to your view controller
\fs22 \cf2 \
\
\
extension
\fs20 \cf4  
\fs22 \cf7 YourViewController
\fs20 \cf4 : 
\fs22 \cf6 UIImagePickerControllerDelegate
\fs20 \cf4 , 
\fs22 \cf6 UINavigationControllerDelegate
\fs20 \cf4 ,
\fs22 \cf7 RSKImageCropViewControllerDelegate
\fs20 \cf4 ,
\fs22 \cf7 RSKImageCropViewControllerDataSource
\fs20 \cf4 \{\
\
//delegate function of cancel for RSKimage Cropper\
\
    
\fs22 \cf2 func
\fs20 \cf4  
\fs22 \cf5 imageCropViewControllerDidCancelCrop
\fs20 \cf4 (
\fs22 \cf2 _
\fs20 \cf4  controller: 
\fs22 \cf7 RSKImageCropViewController
\fs20 \cf4 ) \{\
        
\fs22 \cf2 self
\fs20 \cf4 .
\fs22 \cf6 navigationController
\fs20 \cf4 ?.
\fs22 \cf6 popViewController
\fs20 \cf4 (animated: 
\fs22 \cf2 true
\fs20 \cf4 )\
    \}\
//functions for making cropper rectangular for custom cropper  you can change value as you want \
\
    
\fs22 \cf2 internal
\fs20 \cf4  
\fs22 \cf2 func
\fs20 \cf4  
\fs22 \cf5 imageCropViewControllerCustomMaskRect
\fs20 \cf4 (
\fs22 \cf2 _
\fs20 \cf4  controller: 
\fs22 \cf7 RSKImageCropViewController
\fs20 \cf4 ) -> 
\fs22 \cf6 CGRect
\fs20 \cf4  \{\
           \
        
\fs22 \cf2 let
\fs20 \cf4  aspectRatio = 
\fs22 \cf6 CGSize
\fs20 \cf4 (width: 
\fs22 \cf8 16.0
\fs20 \cf4 , height: 
\fs22 \cf8 9.0
\fs20 \cf4 )\
\
        
\fs22 \cf2 let
\fs20 \cf4  viewWidth = controller.
\fs22 \cf6 view
\fs20 \cf4 .
\fs22 \cf6 frame
\fs20 \cf4 .
\fs22 \cf6 width
\fs20 \cf4 \
        
\fs22 \cf2 let
\fs20 \cf4  viewHeight = controller.
\fs22 \cf6 view
\fs20 \cf4 .
\fs22 \cf6 frame
\fs20 \cf4 .
\fs22 \cf6 height
\fs20 \cf4 \
\
        
\fs22 \cf2 var
\fs20 \cf4  maskWidth: 
\fs22 \cf6 CGFloat
\fs20 \cf4 \
        
\fs22 \cf2 if
\fs20 \cf4  controller.
\fs22 \cf7 isPortraitInterfaceOrientation
\fs20 \cf4 () \{\
            maskWidth = viewWidth\
        \} 
\fs22 \cf2 else
\fs20 \cf4  \{\
            maskWidth = viewHeight\
        \}\
        
\fs22 \cf2 var
\fs20 \cf4  maskHeight: 
\fs22 \cf6 CGFloat
\fs20 \cf4 \
        
\fs22 \cf2 repeat
\fs20 \cf4  \{\
            maskHeight = maskWidth 
\fs22 \cf6 *
\fs20 \cf4  aspectRatio.
\fs22 \cf6 height
\fs20 \cf4  
\fs22 \cf6 /
\fs20 \cf4  aspectRatio.
\fs22 \cf6 width
\fs20 \cf4 \
            maskWidth 
\fs22 \cf6 -=
\fs20 \cf4  
\fs22 \cf8 1.0
\fs20 \cf4 \
        \} 
\fs22 \cf2 while
\fs20 \cf4  maskHeight 
\fs22 \cf6 !=
\fs20 \cf4  
\fs22 \cf6 floor
\fs20 \cf4 (maskHeight)\
        maskWidth 
\fs22 \cf6 +=
\fs20 \cf4  
\fs22 \cf8 1.0
\fs20 \cf4 \
\
        
\fs22 \cf2 let
\fs20 \cf4  maskSize = 
\fs22 \cf6 CGSize
\fs20 \cf4 (width: maskWidth, height: maskHeight)\
\
        
\fs22 \cf2 let
\fs20 \cf4  maskRect = 
\fs22 \cf6 CGRect
\fs20 \cf4 (x: (viewWidth 
\fs22 \cf6 -
\fs20 \cf4  maskSize.
\fs22 \cf6 width
\fs20 \cf4 ) 
\fs22 \cf6 *
\fs20 \cf4  
\fs22 \cf8 0.5
\fs20 \cf4 , y: (viewHeight 
\fs22 \cf6 -
\fs20 \cf4  maskSize.
\fs22 \cf6 height
\fs20 \cf4 ) 
\fs22 \cf6 *
\fs20 \cf4  
\fs22 \cf8 0.5
\fs20 \cf4 , width: maskSize.
\fs22 \cf6 width
\fs20 \cf4 , height: maskSize.
\fs22 \cf6 height
\fs20 \cf4 )\
\
        
\fs22 \cf2 return
\fs20 \cf4  maskRect\
\
       \}\
       \
       
\fs22 \cf2 internal
\fs20 \cf4  
\fs22 \cf2 func
\fs20 \cf4  
\fs22 \cf5 imageCropViewControllerCustomMaskPath
\fs20 \cf4 (
\fs22 \cf2 _
\fs20 \cf4  controller: 
\fs22 \cf7 RSKImageCropViewController
\fs20 \cf4 ) -> 
\fs22 \cf6 UIBezierPath
\fs20 \cf4  \{\
           \
            
\fs22 \cf2 let
\fs20 \cf4  rect = controller.
\fs22 \cf7 maskRect
\fs20 \cf4 \
            
\fs22 \cf2 let
\fs20 \cf4  point1 = 
\fs22 \cf6 CGPoint
\fs20 \cf4 (x: rect.
\fs22 \cf6 minX
\fs20 \cf4 , y: rect.
\fs22 \cf6 maxY
\fs20 \cf4 )\
            
\fs22 \cf2 let
\fs20 \cf4  point2 = 
\fs22 \cf6 CGPoint
\fs20 \cf4 (x: rect.
\fs22 \cf6 maxX
\fs20 \cf4 , y: rect.
\fs22 \cf6 maxY
\fs20 \cf4 )\
            
\fs22 \cf2 let
\fs20 \cf4  point3 = 
\fs22 \cf6 CGPoint
\fs20 \cf4 (x: rect.
\fs22 \cf6 maxX
\fs20 \cf4 , y: rect.
\fs22 \cf6 minY
\fs20 \cf4 )\
            
\fs22 \cf2 let
\fs20 \cf4  point4 = 
\fs22 \cf6 CGPoint
\fs20 \cf4 (x: rect.
\fs22 \cf6 minX
\fs20 \cf4 , y: rect.
\fs22 \cf6 minY
\fs20 \cf4 )\
\
            
\fs22 \cf2 let
\fs20 \cf4  rectangle = 
\fs22 \cf6 UIBezierPath
\fs20 \cf4 ()\
            rectangle.
\fs22 \cf6 move
\fs20 \cf4 (to: point1)\
            rectangle.
\fs22 \cf6 addLine
\fs20 \cf4 (to: point2)\
            rectangle.
\fs22 \cf6 addLine
\fs20 \cf4 (to: point3)\
            rectangle.
\fs22 \cf6 addLine
\fs20 \cf4 (to: point4)\
            rectangle.
\fs22 \cf6 close
\fs20 \cf4 ()\
\
            
\fs22 \cf2 return
\fs20 \cf4  rectangle\
\
       \}\
    \
    
\fs22 \cf2 func
\fs20 \cf4  
\fs22 \cf5 imageCropViewControllerCustomMovementRect
\fs20 \cf4 (
\fs22 \cf2 _
\fs20 \cf4  controller: 
\fs22 \cf7 RSKImageCropViewController
\fs20 \cf4 ) -> 
\fs22 \cf6 CGRect
\fs20 \cf4  \{\
        
\fs22 \cf2 if
\fs20 \cf4  controller.
\fs22 \cf7 rotationAngle
\fs20 \cf4  == 
\fs22 \cf8 0
\fs20 \cf4  \{\
            
\fs22 \cf2 return
\fs20 \cf4  controller.
\fs22 \cf7 maskRect
\fs20 \cf4 \
        \} 
\fs22 \cf2 else
\fs20 \cf4  \{\
            
\fs22 \cf2 let
\fs20 \cf4  maskRect = controller.
\fs22 \cf7 maskRect
\fs20 \cf4 \
            
\fs22 \cf2 let
\fs20 \cf4  rotationAngle = controller.
\fs22 \cf7 rotationAngle
\fs20 \cf4 \
            
\fs22 \cf2 var
\fs20 \cf4  movementRect = 
\fs22 \cf6 CGRect
\fs20 \cf4 .
\fs22 \cf6 zero
\fs20 \cf4 \
            movementRect.
\fs22 \cf6 size
\fs20 \cf4 .
\fs22 \cf6 width
\fs20 \cf4  = 
\fs22 \cf6 CGFloat
\fs20 \cf4 (maskRect.
\fs22 \cf6 width
\fs20 \cf4  
\fs22 \cf6 *
\fs20 \cf4  
\fs22 \cf6 fabs
\fs20 \cf4 (
\fs22 \cf6 cos
\fs20 \cf4 (rotationAngle)) 
\fs22 \cf6 +
\fs20 \cf4  maskRect.
\fs22 \cf6 height
\fs20 \cf4  
\fs22 \cf6 *
\fs20 \cf4  
\fs22 \cf6 fabs
\fs20 \cf4 (
\fs22 \cf6 sin
\fs20 \cf4 (rotationAngle)))\
            movementRect.
\fs22 \cf6 size
\fs20 \cf4 .
\fs22 \cf6 height
\fs20 \cf4  = 
\fs22 \cf6 CGFloat
\fs20 \cf4 (maskRect.
\fs22 \cf6 height
\fs20 \cf4  
\fs22 \cf6 *
\fs20 \cf4  
\fs22 \cf6 fabs
\fs20 \cf4 (
\fs22 \cf6 cos
\fs20 \cf4 (rotationAngle)) 
\fs22 \cf6 +
\fs20 \cf4  maskRect.
\fs22 \cf6 width
\fs20 \cf4  
\fs22 \cf6 *
\fs20 \cf4  
\fs22 \cf6 fabs
\fs20 \cf4 (
\fs22 \cf6 sin
\fs20 \cf4 (rotationAngle)))\
            movementRect.
\fs22 \cf6 origin
\fs20 \cf4 .
\fs22 \cf6 x
\fs20 \cf4  = maskRect.
\fs22 \cf6 minX
\fs20 \cf4  
\fs22 \cf6 +
\fs20 \cf4  (maskRect.
\fs22 \cf6 width
\fs20 \cf4  
\fs22 \cf6 -
\fs20 \cf4  movementRect.
\fs22 \cf6 width
\fs20 \cf4 ) 
\fs22 \cf6 *
\fs20 \cf4  
\fs22 \cf8 0.5
\fs20 \cf4 \
            movementRect.
\fs22 \cf6 origin
\fs20 \cf4 .
\fs22 \cf6 y
\fs20 \cf4  = maskRect.
\fs22 \cf6 minY
\fs20 \cf4  
\fs22 \cf6 +
\fs20 \cf4  (maskRect.
\fs22 \cf6 height
\fs20 \cf4  
\fs22 \cf6 -
\fs20 \cf4  movementRect.
\fs22 \cf6 height
\fs20 \cf4 ) 
\fs22 \cf6 *
\fs20 \cf4  
\fs22 \cf8 0.5
\fs20 \cf4 \
            movementRect.
\fs22 \cf6 origin
\fs20 \cf4 .
\fs22 \cf6 x
\fs20 \cf4  = 
\fs22 \cf6 floor
\fs20 \cf4 (movementRect.
\fs22 \cf6 minX
\fs20 \cf4 )\
            movementRect.
\fs22 \cf6 origin
\fs20 \cf4 .
\fs22 \cf6 y
\fs20 \cf4  = 
\fs22 \cf6 floor
\fs20 \cf4 (movementRect.
\fs22 \cf6 minY
\fs20 \cf4 )\
            movementRect = movementRect.
\fs22 \cf6 integral
\fs20 \cf4 \
            
\fs22 \cf2 return
\fs20 \cf4  movementRect\
        \}\
\
    \}\
//delegate function of RskimageCropper for cropping image\
    \
    
\fs22 \cf2 func
\fs20 \cf4  
\fs22 \cf5 imageCropViewController
\fs20 \cf4 (
\fs22 \cf2 _
\fs20 \cf4  controller: 
\fs22 \cf7 RSKImageCropViewController
\fs20 \cf4 , didCropImage croppedImage: 
\fs22 \cf6 UIImage
\fs20 \cf4 , usingCropRect cropRect: 
\fs22 \cf6 CGRect
\fs20 \cf4 , rotationAngle: 
\fs22 \cf6 CGFloat
\fs20 \cf4 ) \{\
        \
//
\fs22 \cf7 isImageViewChange is variable as for check between circular cropped image usage or rectangular cropped image usage.\
//outletImageProfile is outlet of profile image which needs to be circular\
//backgroundImageForProfileEdit is outlet for cover which needs to be rectangular cropped\

\fs20 \cf4 \

\fs22 \cf2 if
\fs20 \cf4  
\fs22 \cf7 isImageViewChange
\fs20 \cf4 \{\
            \
            
\fs22 \cf2 self
\fs20 \cf4 .
\fs22 \cf7 outletImageProfile
\fs20 \cf4 .
\fs22 \cf6 image
\fs20 \cf4  = croppedImage\
            \
        \}\
        
\fs22 \cf2 else
\fs20 \cf4 \
        \{\
            \
            
\fs22 \cf2 self
\fs20 \cf4 .
\fs22 \cf7 backgroundImageForProfileEdit
\fs20 \cf4 .
\fs22 \cf6 image
\fs20 \cf4  = croppedImage\
        \}\
        \
        
\fs22 \cf2 self
\fs20 \cf4 .
\fs22 \cf6 navigationController
\fs20 \cf4 ?.
\fs22 \cf6 popViewController
\fs20 \cf4 (animated: 
\fs22 \cf2 true
\fs20 \cf4 )\
    \}\
   \
   //delegate function of image picker view\
    \
    
\fs22 \cf2 func
\fs20 \cf4  
\fs22 \cf5 imagePickerController
\fs20 \cf4 (
\fs22 \cf2 _
\fs20 \cf4  picker: 
\fs22 \cf6 UIImagePickerController
\fs20 \cf4 , didFinishPickingMediaWithInfo info: [
\fs22 \cf6 UIImagePickerController
\fs20 \cf4 .
\fs22 \cf6 InfoKey
\fs20 \cf4  : 
\fs22 \cf2 Any
\fs20 \cf4 ]) \{\
        
\fs22 \cf2 var
\fs20 \cf4  selectedImage: 
\fs22 \cf6 UIImage
\fs20 \cf4 ?\
        
\fs22 \cf2 if
\fs20 \cf4  
\fs22 \cf7 isImageViewChange
\fs20 \cf4  
\fs22 \cf6 ==
\fs20 \cf4  
\fs22 \cf2 false
\fs20 \cf4 \
        \{\
            
\fs22 \cf2 if
\fs20 \cf4  
\fs22 \cf2 let
\fs20 \cf4  editedImage = info[.
\fs22 \cf6 editedImage
\fs20 \cf4 ] 
\fs22 \cf2 as
\fs20 \cf4 ? 
\fs22 \cf6 UIImage
\fs20 \cf4  \{\
                \
                selectedImage = editedImage\
                
\fs22 \cf7 backgroundImageForProfileEdit
\fs20 \cf4 .
\fs22 \cf6 image
\fs20 \cf4  = selectedImage!\
                \
                
\fs22 \cf7 imagePickerController
\fs20 \cf4 .
\fs22 \cf6 dismiss
\fs20 \cf4 (animated: 
\fs22 \cf2 true
\fs20 \cf4 , completion: \{\
                   \
                       \
                    
\fs22 \cf2 var
\fs20 \cf4  imageCropVC = 
\fs22 \cf7 RSKImageCropViewController
\fs20 \cf4 ()\
// you can change cropMode to circle, square, custom\
\
//\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\
//this is the main part where your photo is cropped\
                        imageCropVC = 
\fs22 \cf7 RSKImageCropViewController
\fs20 \cf4 (image: 
\fs22 \cf2 self
\fs20 \cf4 .
\fs22 \cf7 backgroundImageForProfileEdit
\fs20 \cf4 .
\fs22 \cf6 image
\fs20 \cf4 !, cropMode: 
\fs22 \cf7 RSKImageCropMode
\fs20 \cf4 .
\fs22 \cf7 custom
\fs20 \cf4 )\
\
                    imageCropVC.
\fs22 \cf7 delegate
\fs20 \cf4  = 
\fs22 \cf2 self
\fs20 \cf4 \
                        imageCropVC.
\fs22 \cf7 dataSource
\fs20 \cf4  = 
\fs22 \cf2 self
\fs20 \cf4 \
\
                    
\fs22 \cf2 self
\fs20 \cf4 .
\fs22 \cf6 navigationController
\fs20 \cf4 ?.
\fs22 \cf6 pushViewController
\fs20 \cf4 (imageCropVC, animated: 
\fs22 \cf2 true
\fs20 \cf4 )\
//\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\
                    \
                    \
                    \
                \})\
                \
            \} 
\fs22 \cf2 else
\fs20 \cf4  
\fs22 \cf2 if
\fs20 \cf4  
\fs22 \cf2 let
\fs20 \cf4  originalImage = info[.
\fs22 \cf6 originalImage
\fs20 \cf4 ] 
\fs22 \cf2 as
\fs20 \cf4 ? 
\fs22 \cf6 UIImage
\fs20 \cf4  \{\
                \
                selectedImage = originalImage\
                
\fs22 \cf7 backgroundImageForProfileEdit
\fs20 \cf4 .
\fs22 \cf6 image
\fs20 \cf4  = selectedImage!\
                \
                
\fs22 \cf7 imagePickerController
\fs20 \cf4 .
\fs22 \cf6 dismiss
\fs20 \cf4 (animated: 
\fs22 \cf2 true
\fs20 \cf4 , completion: \
            \
                        
\fs22 \cf2 var
\fs20 \cf4  imageCropVC : 
\fs22 \cf7 RSKImageCropViewController
\fs20 \cf4 !\
                        \
                        imageCropVC = 
\fs22 \cf7 RSKImageCropViewController
\fs20 \cf4 (image: 
\fs22 \cf2 self
\fs20 \cf4 .
\fs22 \cf7 backgroundImageForProfileEdit
\fs20 \cf4 .
\fs22 \cf6 image
\fs20 \cf4 !, cropMode: 
\fs22 \cf7 RSKImageCropMode
\fs20 \cf4 .
\fs22 \cf7 custom
\fs20 \cf4 )\
                        imageCropVC.
\fs22 \cf7 dataSource
\fs20 \cf4  = 
\fs22 \cf2 self
\fs20 \cf4 \
                        imageCropVC.
\fs22 \cf7 delegate
\fs20 \cf4  = 
\fs22 \cf2 self
\fs20 \cf4 \
                        \
                        
\fs22 \cf2 self
\fs20 \cf4 .
\fs22 \cf6 navigationController
\fs20 \cf4 ?.
\fs22 \cf6 pushViewController
\fs20 \cf4 (imageCropVC, animated: 
\fs22 \cf2 true
\fs20 \cf4 )\
                    \
                    \
                    \
                    \
                \})\
                \
            \}\
        \}\
        
\fs22 \cf2 else
\fs20 \cf4 \{\
            
\fs22 \cf2 if
\fs20 \cf4  
\fs22 \cf2 let
\fs20 \cf4  editedImage = info[.
\fs22 \cf6 editedImage
\fs20 \cf4 ] 
\fs22 \cf2 as
\fs20 \cf4 ? 
\fs22 \cf6 UIImage
\fs20 \cf4  \{\
                \
                selectedImage = editedImage\
                
\fs22 \cf7 outletImageProfile
\fs20 \cf4 .
\fs22 \cf6 image
\fs20 \cf4  = selectedImage!\
                \
                
\fs22 \cf7 imagePickerController
\fs20 \cf4 .
\fs22 \cf6 dismiss
\fs20 \cf4 (animated: 
\fs22 \cf2 true
\fs20 \cf4 , completion: \{\
\
                       \
                        
\fs22 \cf2 var
\fs20 \cf4  imageCropVC = 
\fs22 \cf7 RSKImageCropViewController
\fs20 \cf4 ()\
\
                            imageCropVC = 
\fs22 \cf7 RSKImageCropViewController
\fs20 \cf4 (image: 
\fs22 \cf2 self
\fs20 \cf4 .
\fs22 \cf7 outletImageProfile
\fs20 \cf4 .
\fs22 \cf6 image
\fs20 \cf4 !, cropMode: 
\fs22 \cf7 RSKImageCropMode
\fs20 \cf4 .
\fs22 \cf7 circle
\fs20 \cf4 )\
\
                        imageCropVC.
\fs22 \cf7 delegate
\fs20 \cf4  = 
\fs22 \cf2 self
\fs20 \cf4 \
\
                        
\fs22 \cf2 self
\fs20 \cf4 .
\fs22 \cf6 navigationController
\fs20 \cf4 ?.
\fs22 \cf6 pushViewController
\fs20 \cf4 (imageCropVC, animated: 
\fs22 \cf2 true
\fs20 \cf4 )\
                    \
                    \
                \})\
                \
            \} 
\fs22 \cf2 else
\fs20 \cf4  
\fs22 \cf2 if
\fs20 \cf4  
\fs22 \cf2 let
\fs20 \cf4  originalImage = info[.
\fs22 \cf6 originalImage
\fs20 \cf4 ] 
\fs22 \cf2 as
\fs20 \cf4 ? 
\fs22 \cf6 UIImage
\fs20 \cf4  \{\
                \
                selectedImage = originalImage\
                
\fs22 \cf7 outletImageProfile
\fs20 \cf4 .
\fs22 \cf6 image
\fs20 \cf4  = selectedImage!\
                \
                
\fs22 \cf7 imagePickerController
\fs20 \cf4 .
\fs22 \cf6 dismiss
\fs20 \cf4 (animated: 
\fs22 \cf2 true
\fs20 \cf4 , completion: \{\
\
                 \
                        
\fs22 \cf2 var
\fs20 \cf4  imageCropVC = 
\fs22 \cf7 RSKImageCropViewController
\fs20 \cf4 ()\
\
                            imageCropVC = 
\fs22 \cf7 RSKImageCropViewController
\fs20 \cf4 (image: 
\fs22 \cf2 self
\fs20 \cf4 .
\fs22 \cf7 outletImageProfile
\fs20 \cf4 .
\fs22 \cf6 image
\fs20 \cf4 !, cropMode: 
\fs22 \cf7 RSKImageCropMode
\fs20 \cf4 .
\fs22 \cf7 circle
\fs20 \cf4 )\
\
                        imageCropVC.
\fs22 \cf7 delegate
\fs20 \cf4  = 
\fs22 \cf2 self
\fs20 \cf4 \
\
                        
\fs22 \cf2 self
\fs20 \cf4 .
\fs22 \cf6 navigationController
\fs20 \cf4 ?.
\fs22 \cf6 pushViewController
\fs20 \cf4 (imageCropVC, animated: 
\fs22 \cf2 true
\fs20 \cf4 )\
\
                    \
                    \
                    \
                    \
                \})\
                \
            \}\
        \}\
        \
        \
    \}\
    //delegate function for cancel button in image picker view\
    
\fs22 \cf2 func
\fs20 \cf4  
\fs22 \cf5 imagePickerControllerDidCancel
\fs20 \cf4 (
\fs22 \cf2 _
\fs20 \cf4  picker: 
\fs22 \cf6 UIImagePickerController
\fs20 \cf4 ) \{\
        
\fs22 \cf6 dismiss
\fs20 \cf4 (animated: 
\fs22 \cf2 true
\fs20 \cf4 , completion: 
\fs22 \cf2 nil
\fs20 \cf4 )\
    \}\
\}\
v}